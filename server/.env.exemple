# Environment variables declared in this file are automatically made available to Prisma.
# See the documentation for more detail: https://pris.ly/d/prisma-schema#accessing-environment-variables-from-the-schema

# Prisma supports the native connection string format for PostgreSQL, MySQL, SQLite, SQL Server, MongoDB and CockroachDB.
# See the documentation for all the connection string options: https://pris.ly/d/connection-strings

DATABASE_URL= // data base url

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Users {
  id     String  @id @default(uuid())
  name   String
  email  String
  avatar String?

  notes Notes[]
  tags  Tags[]

  @@map("users")
}

model Notes {
  id          String    @id @default(uuid())
  title       String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?

  Users   Users  @relation(fields: [usersId], references: [id], onDelete: Cascade)
  usersId String

  links Links[]
  tags  Tags[]

  @@unique([usersId])
  @@map("notes")
}

model Tags {
  id    String @id @default(uuid())
  title String

  Users Users  @relation(fields: [usersId], references: [id], onDelete: Cascade)
  Notes Notes? @relation(fields: [notesId], references: [id], onDelete: Cascade)

  notesId String?
  usersId String

  @@unique([usersId, notesId])
  @@map("tags")
}

model Links {
  id        String   @id @default(uuid())
  url       String
  createdAt DateTime @default(now())

  Notes Notes? @relation(fields: [notesId], references: [id], onDelete: Cascade)

  notesId String?

  @@unique([notesId])
  @@map("links")
}

